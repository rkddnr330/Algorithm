정규 표현식이란?
복잡한 문자열을 처리할 때 사용하는 기법. 모든 언어 공통
#한번 배워두면 python 뿐만 아니라 다른 언어에서도 똑같이 적용 가능

어떤 문자가 어떤 규칙에 매치가 되는지 검사하는 여러 수식들이 존재
수식 : [], ., *, +, {n}, {m,n}, ?

문자 클래스 []
#[abc]
-[] 사이의 문자들과 매치 #교집합이 있냐?
-'a'는 정규식과 일치하는 문자인 'a'가 있으므로 매치 #[abc]안에 a가 있으므로 매치
-'before'는 정규식과 일치하는 문자인 'b'가 있으므로 매치 #[abc]안에 before중 b가 있으므로 매치
-'dude'는 정규식과 일치하는 문자인 a,b,c 중 어느 하나도 포함하지 않으므로 매치되지 않음 #[abc]중 하나랑 dude중 하나랑 공통되는 게 없음
-하이픈을 사용하여 From-To로 표현 가능 
-[a-c] = [abc], [0-5] = [012345]

Dot(.)
#a.b
-줄바꿈(₩n)을 제외한 모든 문자와 매치 # '.'이 의미하는 거 : 아무 문자 쌉가능~
-'aab'는 가운데 문자 'a'가 모든 문자를 의미하는 '.'과 일치하므로 정규식과 매치 #a는 문자이므로 매치
-'a1b'는 가운데 문자 '1'이 모든 문자를 의미하는 '.'과 일치하므로 정규식과 매치
-'abc'는 'a'문자와 'b'문자 사이에 어떤 문자라도 하나는 있어야 하는데 없으므로 이 정규식과 매치되지 않음
+) 그럼 a.b랑 aabc는 매치되냐? 

반복(*) #바로 앞 문자가 여러번 반복된다는 뜻. 0번도 반복으로 침
#ca*t
-'ct'는 'a'가 0번 반복되어 매치
-'cat'는 'a'가 0번 이상 반복되어 매치 (1번 반복)
-'caaat'는 'a'가 0번 이상 반복되어 매치 (3번 반복)

반복(+) #바로 앞 문자가 여러번 반복. 단, *와 달리 0번은 반복으로 안침
#ca+t
-'ct'는 'a'가 0번 반복되어 매치되지 않음 #0번은 반복(+)에서 안쳐준다. 안돼 돌아가~
-'cat'는 'a'가 1번 이상 반복되어 매치 (1번 반복)
-'caaat'는 'a'가 1번 이상 반복되어 매치 (3번 반복)

반복({m,n},?)
#ca{2}t  ...  {2}는 앞의 글자가 딱 2번만 반복
-'cat'는 'a'가 1번만 반복되어 매치되지 않음
-'caat'는 'a'가 2번 반복되어 매치
+)'caaat'는 'a'가 3번 반복되어 매치되지 않음

#ca{2,5}t  ...  {2,5}는 앞글자가 2번 이상, 5번 이하 반복. 2 <= 반복 <= 5
-'cat'는 'a'가 1번만 반복되어 매치되지 않음
-'caat'는 'a'가 2번 반복되어 매치
-'caaaaat'는 'a'가 5번 반복되어 매치

#ab?c  ...  ?는 앞글자가 0번 or 1번 반복
-'abc'는 'b'가 1번 사용되어 매치
-'ac'는 'b'가 0번 사용되어 매치
+)'abbc'는 'b'가 2번이기 때문에 매치되지 않겠지?
- ? = {0,1} #둘이 같은 표현이다!

